CLASS Circle

CLASSFIELD:
    diameter (Integer)

DEFAULT CONSTRUCTOR:
    super<-None
    diameter = 0

ALTERNATE CONSTRUCTOR:
IMPORTS: diameter (Integer)
ALGORITHM: 
    super<-None
    validateDiameter<-inDiameter

COPY CONSTRUCTOR:
IMPORTS: inCircle (Circle)
ALGORITHM:
    super<-None
    diameter = inCircle.getDiameter
    area = inCircle.getArea

ACCESSOR getDiameter
IMPORTS: None
EXPORT: diameter

MUTATOR setDiameter
IMPORTS: inDiameter
EXPORT: None
ALGORITHM:
    diameter = validateDiameter<-inDiameter
    setArea<-calcArea<-diameter

equals
IMPORTS: inCircle (Object)
EXPORT: isEqual (Boolean)
ALGORITHM:
    isEqual = false
    circle = (Convert to Circle) inCircle
    IF circle.getArea == area THEN:
        IF circle.getDiameter == diameter THEN:
            isEqual = TRUE
        ENDIF
    ENDIF
    
toString
IMPORTS: None
EXPORT: circleString (String)
ALGORITHM: 
	circleString = "diameter: " + diameter + " area: " + area

SUBMODULE: validateDiameter
IMPORTS: diameter (Integer)
EXPORT: diameter
ALGORITHM:
    IF diameter < 0 THEN:
        FAIL "diameter cant be less than 0"
    ENDIF

SUBMODULE calcArea
IMPORTS: None
EXPORT: area(Real)
    area = PI * ((Convert to Real)diameter/2.0)^2

clone
IMPORTS: None
EXPORT: outCircle
ALGORITHM: 
	construct outCircle using this